from .models import User, Channel, Subscription, Post, BackfillRequest
from sqlalchemy.dialects.postgresql import insert
from .engine import session_maker
from sqlalchemy import select, and_
from sqlalchemy.orm import selectinload
from sqlalchemy.ext.asyncio import AsyncSession
import logging
from typing import Optional


async def add_subscription(
    session: AsyncSession,
    user_id: int,
    channel_id: int,
    channel_title: str,
    channel_un: Optional[str]
) -> tuple[str, Channel | None]:

    logging.info(f"üîç add_subscription –≤—ã–∑–≤–∞–Ω–∞: user_id={user_id}, channel_id={channel_id}, title={channel_title}")

    # –®–∞–≥ 1: –ò—â–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    sub_query = select(Subscription).where(
        Subscription.user_id == user_id,
        Subscription.channel_id == channel_id
    )
    existing_subscription = (await session.execute(sub_query)).scalars().first()

    if existing_subscription:
        channel = await session.get(Channel, channel_id)
        logging.info(f"‚ÑπÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è user_id={user_id}, channel_id={channel_id}")
        return f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª ¬´{channel.title if channel else ''}¬ª.", None

    # –®–∞–≥ 3: –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ù–ï–¢, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É.
    user = await session.get(User, user_id)
    if not user:
        logging.info(f"üë§ –°–æ–∑–¥–∞—é –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={user_id}")
        user = User(id=user_id, subscription_count=0)  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0
        session.add(user)
    else:
        logging.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: user_id={user_id}, subscription_count={user.subscription_count}")
        
        # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞—â–∏—Ç–∞ –æ—Ç NULL –∑–Ω–∞—á–µ–Ω–∏—è
        if user.subscription_count is None:
            logging.warning(f"‚ö†Ô∏è subscription_count –±—ã–ª NULL –¥–ª—è user_id={user_id}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é 0")
            user.subscription_count = 0

    # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    current_count = user.subscription_count or 0  # –ó–∞—â–∏—Ç–∞ –æ—Ç None
    if current_count >= 10:
        logging.warning(f"üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è user_id={user_id}: {current_count}")
        return "üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤ 10 –ø–æ–¥–ø–∏—Å–æ–∫. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø–∏—à–∏—Ç–µ—Å—å –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ.", None
    
    channel = await session.get(Channel, channel_id)
    if not channel:
        logging.info(f"üì∫ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª: channel_id={channel_id}, title={channel_title}")
        channel = Channel(id=channel_id, title=channel_title, username=channel_un)
        session.add(channel)

    # –®–∞–≥ 4: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É.
    new_subscription = Subscription(user_id=user_id, channel_id=channel_id)
    session.add(new_subscription)

    user.subscription_count = current_count + 1
    logging.info(f"‚úÖ –£–≤–µ–ª–∏—á–∏–≤–∞—é —Å—á–µ—Ç—á–∏–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è user_id={user_id}: {user.subscription_count}")

    # –®–∞–≥ 5: –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è.
    await session.commit()
    logging.info(f"üíæ –ö–æ–º–º–∏—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–ª—è user_id={user_id}")

    return f"‚úÖ –ö–∞–Ω–∞–ª ¬´{channel_title}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ—Å—Ç–æ–≤...", channel

# –§—É–Ω–∫—Ü–∏—è get_user_feed –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
async def get_user_feed(session: AsyncSession, user_id: int, limit: int = 20, offset: int = 0) -> list[Post]:
    feed_query = (
        select(Post)
        .join(Subscription, Post.channel_id == Subscription.channel_id)
        .where(Subscription.user_id == user_id)
        .options(selectinload(Post.channel))
        .order_by(Post.date.desc())
        .offset(offset)
        .limit(limit)
    )
    feed_result = await session.execute(feed_query)
    return list(feed_result.scalars().all())

async def get_user_subscriptions(session: AsyncSession, user_id: int) -> list[Channel]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Channel, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
    """
    subs_query = (
        select(Channel)
        .join(Subscription, Channel.id == Subscription.channel_id)
        .where(Subscription.user_id == user_id)
        .order_by(Channel.title) # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    )

    result = await session.execute(subs_query)
    return list(result.scalars().all())

async def delete_subscription(session: AsyncSession, user_id: int, channel_id: int) -> bool:
    """
    –£–¥–∞–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –∏ False, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞.
    """
    sub_query = select(Subscription).where(
        Subscription.user_id == user_id,
        Subscription.channel_id == channel_id
    )
    existing_subscription = (await session.execute(sub_query)).scalars().first()

    if existing_subscription:
        user = await session.get(User, user_id)
        if user:
            # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ó–∞—â–∏—Ç–∞ –æ—Ç NULL –∑–Ω–∞—á–µ–Ω–∏—è
            current_count = user.subscription_count or 0
            if current_count > 0:
                user.subscription_count = current_count - 1
            else:
                logging.warning(f"‚ö†Ô∏è subscription_count —É–∂–µ 0 –¥–ª—è user_id={user_id}")
                user.subscription_count = 0

        await session.delete(existing_subscription)
        await session.commit()
        return True

    return False

async def create_backfill_request(session: AsyncSession, user_id: int):
    """
    –°–æ–∑–¥–∞–µ—Ç –∑–∞—è–≤–∫—É –Ω–∞ –¥–æ–∑–∞–≥—Ä—É–∑–∫—É –ø–æ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç (–±–ª–∞–≥–æ–¥–∞—Ä—è on_conflict_do_nothing).
    """
    stmt = insert(BackfillRequest).values(user_id=user_id)
    stmt = stmt.on_conflict_do_nothing(index_elements=['user_id'])
    await session.execute(stmt)
    await session.commit()

async def check_backfill_request_exists(session: AsyncSession, user_id: int) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∑–∞—è–≤–∫–∞ –Ω–∞ –¥–æ–∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∑–∞—è–≤–∫–∞ –µ—Å—Ç—å, –∏–Ω–∞—á–µ False.
    """
    stmt = select(BackfillRequest).where(BackfillRequest.user_id == user_id)
    result = await session.execute(stmt)
    return result.scalars().first() is not None