from aiogram import Router, types
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
from database.requests import get_user_subscriptions

router = Router()

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ –ª–µ–Ω—Ç—É, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏ –º–Ω–µ –ª—é–±–æ–π –ø–æ—Å—Ç –∏–∑ –Ω–µ–≥–æ. üöÄ")

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /subscriptions
@router.message(Command("subscriptions"))
async def cmd_subscriptions(message: types.Message, session: AsyncSession):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.
    """
    if not message.from_user:
        await message.answer("–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    subscriptions = await get_user_subscriptions(session, message.from_user.id)

    if not subscriptions:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫. \n\n–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ø–æ—Å—Ç –∏–∑ –Ω–µ–≥–æ.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç
    response_text = "‚ú® **–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:**\n\n"
    for i, channel in enumerate(subscriptions, 1):
        # –ï—Å–ª–∏ —É –∫–∞–Ω–∞–ª–∞ –µ—Å—Ç—å —é–∑–µ—Ä–Ω–µ–π–º, –¥–µ–ª–∞–µ–º –µ–≥–æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
        if channel.username:
            response_text += f"{i}. <a href='https://t.me/{channel.username}'>{channel.title}</a>\n"
        else:
            response_text += f"{i}. {channel.title}\n"
    
    await message.answer(response_text, parse_mode="HTML", disable_web_page_preview=True)