import os
import json
import logging
import redis.asyncio as aioredis
from typing import Any, Dict
from collections import defaultdict
from aiogram import Router, types, F
from sqlalchemy.ext.asyncio import AsyncSession
import asyncio

# --- –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Telethon –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
from worker import client
from database.requests import add_subscription

router = Router()
user_locks = defaultdict(lambda: asyncio.Lock())

@router.message(F.forward_from_chat)
async def handle_forwarded_message(message: types.Message, session: AsyncSession, redis_client: aioredis.Redis):
    if not message.from_user or not message.forward_from_chat or message.forward_from_chat.type != 'channel':
        return await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
    
    # --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ô –õ–û–ì–ò–ö–ò: –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–†–ò–í–ê–¢–ù–´–ô –ö–ê–ù–ê–õ ---
    channel_forward = message.forward_from_chat
    channel_title_for_reply = channel_forward.title or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

    try:
        if not client.is_connected():
            await client.connect()
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É. –ï—Å–ª–∏ –æ–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π, –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—à–∏–±–∫–∞.
        entity_identifier = channel_forward.username or channel_forward.id
        await client.get_entity(entity_identifier)

    except (ValueError, TypeError):
        # –ï—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø - —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª.
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª: {channel_title_for_reply}")
        await message.answer(
            f"‚ùå **–ö–∞–Ω–∞–ª ¬´{channel_title_for_reply}¬ª ‚Äî –ø—Ä–∏–≤–∞—Ç–Ω—ã–π.**\n\n"
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—É–±–ª–∏—á–Ω—ã–µ –∫–∞–Ω–∞–ª—ã.",
            parse_mode="Markdown"
        )
        return
    except Exception as e:
        logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞ {channel_title_for_reply}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–∞–Ω–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if message.media_group_id:
        cache_key = f"media_group_processed:{message.media_group_id}"
        is_first = await redis_client.set(cache_key, "1", ex=10, nx=True)
        if not is_first:
            logging.info(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç –∏–∑ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã {message.media_group_id}")
            return

    # –õ–æ–≥–∏–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    user_lock = user_locks[message.from_user.id]

    async with user_lock:
        logging.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª: {channel_title_for_reply}")
        
        response_msg, new_channel = await add_subscription(
            session=session, 
            user_id=message.from_user.id,
            channel_id=channel_forward.id,
            channel_title=channel_title_for_reply,
            # –í–∞–∂–Ω–æ: –ø–µ—Ä–µ–¥–∞–µ–º None –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É
            channel_un=channel_forward.username or None
        )
    
    await message.answer(response_msg)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –≤ Redis (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    if new_channel and redis_client:
        try:
            task: Dict[str, Any] = {
                "user_chat_id": str(message.from_user.id),
                "channel_id": str(new_channel.id),
                "channel_title": new_channel.title,
            }
            
            logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–¥–∞—á—É –≤ Redis: {task}")
            
            task_json: str = json.dumps(task)
            await redis_client.lpush("new_channel_tasks", task_json)
            
            logging.info(f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Redis –¥–ª—è –∫–∞–Ω–∞–ª–∞ {new_channel.title}")
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏ –≤ Redis: {e}", exc_info=True)
    else:
        if not new_channel:
            logging.info(f"‚ÑπÔ∏è –ö–∞–Ω–∞–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–¥–∞—á–∞ –≤ Redis –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
        if not redis_client:
            logging.error(f"‚ùå Redis client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")