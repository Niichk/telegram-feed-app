from aiogram import Router, types, F
from sqlalchemy.ext.asyncio import AsyncSession
from database.requests import add_subscription
from worker import fetch_posts_for_channel, upload_avatar_to_s3, client
from database.engine import session_maker
from database.models import Channel
import logging
import asyncio
from collections import defaultdict
from .user_commands import get_main_keyboard

router = Router()

user_locks = defaultdict(asyncio.Lock)
PROCESSED_MEDIA_GROUPS = set()

async def remove_media_group_id_after_delay(media_group_id: str, delay: int):
    await asyncio.sleep(delay)
    PROCESSED_MEDIA_GROUPS.discard(media_group_id)

# --- –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –§–û–ù–û–í–û–ô –ó–ê–î–ê–ß–ò ---
async def process_new_channel_background(message: types.Message, channel_id: int):
    """
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ, –ø—Ä–∏–Ω–∏–º–∞—è ID –∫–∞–Ω–∞–ª–∞, –∞ –Ω–µ –æ–±—ä–µ–∫—Ç.
    """
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é, –Ω–µ–∑–∞–≤–∏—Å–∏–º—É—é —Å–µ—Å—Å–∏—é –ë–î –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
    async with session_maker() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º "—Å–≤–µ–∂–∏–π" –æ–±—ä–µ–∫—Ç –∫–∞–Ω–∞–ª–∞ –∏–∑ –ë–î –ø–æ ID
            channel_obj = await session.get(Channel, channel_id)
            if not channel_obj:
                logging.error(f"–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–µ —Å–º–æ–≥–ª–∞ –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª —Å ID {channel_id}")
                return

            if not client.is_connected():
                await client.connect()

            entity_identifier = channel_obj.username or channel_obj.id
            channel_entity = await client.get_entity(entity_identifier)

            avatar_url = await upload_avatar_to_s3(channel_entity)
            if avatar_url:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤–∞—Ç–∞—Ä –≤ —Ä–∞–º–∫–∞—Ö –Ω–∞—à–µ–π —Å–µ—Å—Å–∏–∏
                channel_obj.avatar_url = avatar_url
                session.add(channel_obj)
                await session.commit()

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ—Å—Ç–æ–≤
            await fetch_posts_for_channel(channel=channel_obj, db_session=session, post_limit=20)

            # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer(
                f"üëç –ì–æ—Ç–æ–≤–æ! –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ ¬´{channel_obj.title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à—É –ª–µ–Ω—Ç—É.",
                reply_markup=get_main_keyboard()
            )
            
        except Exception as e:
            # –ï—Å–ª–∏ –ª—é–±–∞—è –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–π –≤—ã—à–µ –ø—Ä–æ–≤–∞–ª–∏—Ç—Å—è, –º—ã —Å–æ–æ–±—â–∏–º –æ–± —ç—Ç–æ–º
            logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–Ω–∞–ª–∞ {channel_id}: {e}", exc_info=True)
            await message.answer(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –µ—â–µ —Ä–∞–∑.",
                reply_markup=get_main_keyboard()
            )

@router.message(F.forward_from_chat)
async def handle_forwarded_message(message: types.Message, session: AsyncSession):
    if message.media_group_id:
        if message.media_group_id in PROCESSED_MEDIA_GROUPS:
            return
        PROCESSED_MEDIA_GROUPS.add(message.media_group_id)
        asyncio.create_task(remove_media_group_id_after_delay(str(message.media_group_id), 5))

    if not message.from_user:
        await message.reply("–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return

    user_lock = user_locks[message.from_user.id]

    async with user_lock:
        if not message.forward_from_chat or message.forward_from_chat.type != 'channel':
            await message.reply("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
            return

        user = message.from_user
        channel_forward = message.forward_from_chat

        response_message, new_channel_obj = await add_subscription(
            session=session,
            user_id=user.id,
            channel_id=channel_forward.id,
            channel_title=channel_forward.title or "",
            channel_un=channel_forward.username or ""
        )
    
    await message.answer(response_message)

    if new_channel_obj:
        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        # –ü–µ—Ä–µ–¥–∞–µ–º –≤ —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Ç–æ–ª—å–∫–æ ID, –∞ –Ω–µ –≤–µ—Å—å –æ–±—ä–µ–∫—Ç
        asyncio.create_task(process_new_channel_background(message, new_channel_obj.id))