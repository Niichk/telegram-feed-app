from aiogram import Router, types, F
from sqlalchemy.ext.asyncio import AsyncSession
from database.requests import add_subscription
from worker import fetch_posts_for_channel, upload_avatar_to_s3, client
from database.models import Channel
import logging
import asyncio
from collections import defaultdict

router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_locks = defaultdict(asyncio.Lock)

# --- –î–û–ë–ê–í–õ–ï–ù–û: –ö—ç—à –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø ---
PROCESSED_MEDIA_GROUPS = set()

async def remove_media_group_id_after_delay(media_group_id: str, delay: int):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø."""
    await asyncio.sleep(delay)
    PROCESSED_MEDIA_GROUPS.discard(media_group_id)


@router.message(F.forward_from_chat)
async def handle_forwarded_message(message: types.Message, session: AsyncSession):
    # --- –î–û–ë–ê–í–õ–ï–ù–û: –õ–æ–≥–∏–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–ª—å–±–æ–º–æ–≤ (–º–µ–¥–∏–∞-–≥—Ä—É–ø–ø) ---
    if message.media_group_id:
        # –ï—Å–ª–∏ ID –≥—Ä—É–ø–ø—ã —É–∂–µ –≤ –Ω–∞—à–µ–º –∫—ç—à–µ, –∑–Ω–∞—á–∏—Ç –º—ã —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —ç—Ç–æ—Ç –∞–ª—å–±–æ–º. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
        if message.media_group_id in PROCESSED_MEDIA_GROUPS:
            return
        # –ï—Å–ª–∏ ID –Ω–æ–≤—ã–π, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∫—ç—à –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É.
        PROCESSED_MEDIA_GROUPS.add(message.media_group_id)
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è —É–¥–∞–ª–∏—Ç ID –∏–∑ –∫—ç—à–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –ø–∞–º—è—Ç—å.
        asyncio.create_task(remove_media_group_id_after_delay(str(message.media_group_id), 5))
    # --- –ö–û–ù–ï–¶ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ---

    if not message.from_user:
        await message.reply("–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.")
        return

    user_lock = user_locks[message.from_user.id]

    async with user_lock:
        if not message.forward_from_chat or message.forward_from_chat.type != 'channel':
            await message.reply("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
            return

        user = message.from_user
        channel_forward = message.forward_from_chat

        response_message, new_channel_obj = await add_subscription(
            session=session,
            user_id=user.id,
            channel_id=channel_forward.id,
            channel_title=channel_forward.title or "",
            channel_un=channel_forward.username or ""
        )

    await message.answer(response_message)

    if not new_channel_obj:
        return

    try:
        if not client.is_connected():
            await client.connect()

        entity_identifier = new_channel_obj.username or new_channel_obj.id
        channel_entity = await client.get_entity(entity_identifier)

        avatar_url = await upload_avatar_to_s3(channel_entity)
        if avatar_url:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º fresh query –≤–º–µ—Å—Ç–æ merge
            async with session.begin():
                channel_to_update = await session.get(Channel, new_channel_obj.id)
                if channel_to_update:
                    channel_to_update.avatar_url = avatar_url

        await fetch_posts_for_channel(channel=new_channel_obj, db_session=session, post_limit=20)

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º title –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏
        fresh_channel = await session.get(Channel, new_channel_obj.id)
        channel_title = fresh_channel.title if fresh_channel else "–∫–∞–Ω–∞–ª"
        
        await message.answer(f"üëç –ì–æ—Ç–æ–≤–æ! –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ ¬´{channel_title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à—É –ª–µ–Ω—Ç—É.")
        
    except ValueError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É {new_channel_obj.id}: {e}")
        await message.answer(
            f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É ¬´{new_channel_obj.title}¬ª.**\n\n"
            f"–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —ç—Ç–æ —á–∞—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª.",
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ {new_channel_obj.id}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")