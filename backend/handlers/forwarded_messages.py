from aiogram import Router, types, F
from sqlalchemy.ext.asyncio import AsyncSession
from database.requests import add_subscription
from worker import fetch_posts_for_channel, upload_avatar_to_s3, client
import logging
from asyncio import Lock


router = Router()

channel_lock = Lock()

@router.message(F.forward_from_chat)
async def handle_forwarded_message(message: types.Message, session: AsyncSession):
    async with channel_lock:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞
        if not message.forward_from_chat or message.forward_from_chat.type != 'channel':
            await message.reply("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
            return

        if not message.from_user:
            await message.reply("–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.")
            return

        user = message.from_user
        channel_forward = message.forward_from_chat

        # –®–∞–≥ 1: –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
        # --- –ò–ó–ú–ï–ù–ï–ù–û: –ë–æ–ª—å—à–µ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ–º –ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ---
        response_message, new_channel_obj = await add_subscription(
            session=session,
            user_id=user.id,
            # user_fn=user.first_name, # –£–î–ê–õ–ï–ù–û
            # user_un=user.username or "", # –£–î–ê–õ–ï–ù–û
            channel_id=channel_forward.id,
            channel_title=channel_forward.title or "",
            channel_un=channel_forward.username or ""
        )

        # –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–≤–µ—Ç (–ª–∏–±–æ "—É—Å–ø–µ—à–Ω–æ", –ª–∏–±–æ "—É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã")
        await message.answer(response_message)

        # --- –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨ ---
        # –®–∞–≥ 3: –ï—Å–ª–∏ new_channel_obj —Ä–∞–≤–µ–Ω None, –∑–Ω–∞—á–∏—Ç, –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –±—ã–ª–∞. –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º.
        if not new_channel_obj:
            return

        # –®–∞–≥ 4: –ï—Å–ª–∏ –∂–µ –∫–∞–Ω–∞–ª –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –Ω–æ–≤—ã–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É...
        try:
            if not client.is_connected():
                await client.connect()

            entity_identifier = new_channel_obj.username or new_channel_obj.id
            channel_entity = await client.get_entity(entity_identifier)

            avatar_url = await upload_avatar_to_s3(channel_entity)
            if avatar_url:
                await session.merge(new_channel_obj)
                new_channel_obj.avatar_url = avatar_url
                await session.commit()

            await fetch_posts_for_channel(channel=new_channel_obj, db_session=session, post_limit=20)

            await message.answer(f"üëç –ì–æ—Ç–æ–≤–æ! –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ ¬´{new_channel_obj.title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à—É –ª–µ–Ω—Ç—É.")

        except ValueError as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É {new_channel_obj.id}: {e}")
            await message.answer(
                f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É ¬´{new_channel_obj.title}¬ª.**\n\n"
                f"–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —ç—Ç–æ —á–∞—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª.",
                parse_mode="Markdown"
            )