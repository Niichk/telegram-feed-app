from aiogram import Router, types, F
from sqlalchemy.ext.asyncio import AsyncSession
from database.requests import add_subscription
from worker import fetch_posts_for_channel, upload_avatar_to_s3, client 
import logging

router = Router()

@router.message(F.forward_from_chat)
async def handle_forwarded_message(message: types.Message, session: AsyncSession):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É –∏ –°–†–ê–ó–£ –ñ–ï
    –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–±–æ—Ä –ø–æ—Å—Ç–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.
    """
    if not message.forward_from_chat or message.forward_from_chat.type != 'channel':
        await message.reply("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
        return

    if not message.from_user:
        await message.reply("–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.")
        return

    user = message.from_user
    channel_forward = message.forward_from_chat

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    response_message, new_channel_obj = await add_subscription(
        session=session,
        user_id=user.id,
        user_fn=user.first_name,
        user_un=user.username or "",
        channel_id=channel_forward.id,
        channel_title=channel_forward.title or "",
        channel_un=channel_forward.username or ""
    )
    
    await message.answer(response_message)

    # –ï—Å–ª–∏ –±—ã–ª —Å–æ–∑–¥–∞–Ω –ù–û–í–´–ô –∫–∞–Ω–∞–ª, –∑–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä
    if new_channel_obj:
        try:
            if not client.is_connected():
                await client.connect()
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º Telethon entity —á–µ—Ä–µ–∑ username –∏–ª–∏ ID
            telethon_entity = None
            if channel_forward.username:
                # –ï—Å–ª–∏ –µ—Å—Ç—å username, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                telethon_entity = await client.get_entity(channel_forward.username)
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç username, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–µ—Ä–µ–∑ ID
                try:
                    telethon_entity = await client.get_entity(channel_forward.id)
                except ValueError:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å entity –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel_forward.id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤–∞—Ç–∞—Ä")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–≤–∞—Ç–∞—Ä –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ entity
            if telethon_entity:
                avatar_url = await upload_avatar_to_s3(telethon_entity)
                if avatar_url:
                    new_channel_obj.avatar_url = avatar_url
                    session.add(new_channel_obj)
                    await session.commit()

            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–±–æ—Ä–∞ –ø–æ—Å—Ç–æ–≤
            await fetch_posts_for_channel(channel=new_channel_obj, db_session=session, post_limit=20)
            
            await message.answer(f"üëç –ì–æ—Ç–æ–≤–æ! –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ ¬´{new_channel_obj.title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à—É –ª–µ–Ω—Ç—É.")
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ {new_channel_obj.title}: {e}")
            await message.answer(f"–ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")