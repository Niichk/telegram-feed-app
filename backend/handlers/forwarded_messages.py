import asyncio
import logging
import json
import os
from typing import Any, Dict  # –î–û–ë–ê–í–ò–¢–¨
from collections import defaultdict
from aiogram import F, Router, types
from sqlalchemy.ext.asyncio import AsyncSession
import redis.asyncio as aioredis

from database.requests import add_subscription

router = Router()
user_locks = defaultdict(asyncio.Lock)
REDIS_URL = os.getenv("REDIS_URL")
redis_client = aioredis.from_url(REDIS_URL) if REDIS_URL else None

@router.message(F.forward_from_chat)
async def handle_forwarded_message(message: types.Message, session: AsyncSession):
    if not message.from_user or not message.forward_from_chat or message.forward_from_chat.type != 'channel':
        return await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")

    user_lock = user_locks[message.from_user.id]
    async with user_lock:
        logging.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª: {message.forward_from_chat.title}")
        
        response_msg, new_channel = await add_subscription(
            session=session, user_id=message.from_user.id,
            channel_id=message.forward_from_chat.id,
            channel_title=message.forward_from_chat.title or "",
            channel_un=message.forward_from_chat.username or ""
        )
    
    await message.answer(response_msg)

    if new_channel and redis_client:
        try:
            task: Dict[str, Any] = {  # –î–û–ë–ê–í–ò–¢–¨ type hint
                "user_chat_id": str(message.chat.id),
                "channel_id": str(new_channel.id),
                "channel_title": new_channel.title,
            }
            
            logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–¥–∞—á—É –≤ Redis: {task}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –¥–ª—è json.dumps
            task_json: str = json.dumps(task)
            await redis_client.lpush("new_channel_tasks", json.dumps(task))  # type: ignore[misc]
            
            logging.info(f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Redis –¥–ª—è –∫–∞–Ω–∞–ª–∞ {new_channel.title}")
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏ –≤ Redis: {e}", exc_info=True)
    else:
        if not new_channel:
            logging.info(f"‚ÑπÔ∏è –ö–∞–Ω–∞–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–¥–∞—á–∞ –≤ Redis –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
        if not redis_client:
            logging.error(f"‚ùå Redis client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! REDIS_URL = {os.getenv('REDIS_URL')}")