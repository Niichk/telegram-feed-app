import os
import json
import logging
import redis.asyncio as aioredis
from typing import Any, Dict
from collections import defaultdict
from aiogram import Router, types, F
from sqlalchemy.ext.asyncio import AsyncSession

from database.requests import add_subscription

router = Router()
user_locks = defaultdict(lambda: None)

@router.message(F.forward_from_chat)
async def handle_forwarded_message(message: types.Message, session: AsyncSession, redis_client: aioredis.Redis):
    if not message.from_user or not message.forward_from_chat or message.forward_from_chat.type != 'channel':
        return await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
    
    if message.media_group_id:
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è Redis
        cache_key = f"media_group_processed:{message.media_group_id}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É –≥—Ä—É–ø–ø—É
        is_processed = await redis_client.get(cache_key)
        if is_processed:
            logging.info(f"–ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –¥—É–±–ª–∏–∫–∞—Ç –∏–∑ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã {message.media_group_id}")
            return  # –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—è

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –≥—Ä—É–ø–ø—ã, —Å—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –≤ Redis –Ω–∞ 10 —Å–µ–∫—É–Ω–¥
        await redis_client.set(cache_key, "1", ex=10)

    user_lock = user_locks[message.from_user.id]
    if user_lock is None:
        import asyncio
        user_lock = asyncio.Lock()
        user_locks[message.from_user.id] = user_lock # type: ignore

    async with user_lock:
        logging.info(f"üîÑ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –¥–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª: {message.forward_from_chat.title}")
        
        response_msg, new_channel = await add_subscription(
            session=session, 
            user_id=message.from_user.id,
            channel_id=message.forward_from_chat.id,
            channel_title=message.forward_from_chat.title or "",
            channel_un=message.forward_from_chat.username or ""
        )
    
    await message.answer(response_msg)

    if new_channel and redis_client:
        try:
            task: Dict[str, Any] = {
                "user_chat_id": str(message.from_user.id),  # ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: from_user.id
                "channel_id": str(new_channel.id),
                "channel_title": new_channel.title,
            }
            
            logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–¥–∞—á—É –≤ Redis: {task}")
            
            task_json: str = json.dumps(task)
            await redis_client.lpush("new_channel_tasks", task_json)
            
            logging.info(f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Redis –¥–ª—è –∫–∞–Ω–∞–ª–∞ {new_channel.title}")
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏ –≤ Redis: {e}", exc_info=True)
    else:
        if not new_channel:
            logging.info(f"‚ÑπÔ∏è –ö–∞–Ω–∞–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–¥–∞—á–∞ –≤ Redis –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è")
        if not redis_client:
            logging.error(f"‚ùå Redis client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")