from aiogram import Router, types, F
from sqlalchemy.ext.asyncio import AsyncSession
from database.requests import add_subscription
from database.engine import session_maker  # –î–û–ë–ê–í–ò–¢–¨: –∏–º–ø–æ—Ä—Ç session_maker
from worker import fetch_posts_for_channel, upload_avatar_to_s3, client
import logging
from asyncio import Lock
from collections import defaultdict

router = Router()

# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_locks = defaultdict(Lock)

@router.message(F.forward_from_chat)
async def handle_forwarded_message(message: types.Message, session: AsyncSession):
    if not message.from_user:
        await message.reply("–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_lock = user_locks[message.from_user.id]

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ DB –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    async with user_lock:
        if not message.forward_from_chat or message.forward_from_chat.type != 'channel':
            await message.reply("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
            return

        user = message.from_user
        channel_forward = message.forward_from_chat

        # –®–∞–≥ 1: –ü—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
        response_message, new_channel_obj = await add_subscription(
            session=session,
            user_id=user.id,
            channel_id=channel_forward.id,
            channel_title=channel_forward.title or "",
            channel_un=channel_forward.username or ""
        )

        # –®–∞–≥ 2: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–≤–µ—Ç —Å—Ä–∞–∑—É
        await message.answer(response_message)

        # –®–∞–≥ 3: –ï—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–æ–≤—ã–π, –≤—ã—Ö–æ–¥–∏–º
        if not new_channel_obj:
            return

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        channel_data = {
            'id': new_channel_obj.id,
            'title': new_channel_obj.title,
            'username': new_channel_obj.username
        }

    # --- –ë–õ–û–ö–ò–†–û–í–ö–ê –û–°–í–û–ë–û–ñ–î–ï–ù–ê ---
    # –¢–µ–ø–µ—Ä—å –≤—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–ª–≥–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π

    # –®–∞–≥ 4: –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –¥–æ–ª–≥–∏–µ —Å–µ—Ç–µ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–µ–π
    try:
        if not client.is_connected():
            await client.connect()

        entity_identifier = channel_data['username'] or channel_data['id']
        channel_entity = await client.get_entity(entity_identifier)

        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–ª—è –¥–æ–ª–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        async with session_maker() as new_session:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞–Ω–∞–ª–∞ –≤ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
            from database.models import Channel
            from sqlalchemy import select
            
            stmt = select(Channel).where(Channel.id == channel_data['id'])
            result = await new_session.execute(stmt)
            channel_obj = result.scalars().first()
            
            if not channel_obj:
                logging.error(f"–ö–∞–Ω–∞–ª {channel_data['id']} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î")
                return

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞–≤–∞—Ç–∞—Ä
            avatar_url = await upload_avatar_to_s3(channel_entity)
            if avatar_url:
                channel_obj.avatar_url = avatar_url
                await new_session.commit()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å—Ç—ã
            await fetch_posts_for_channel(
                channel=channel_obj, 
                db_session=new_session, 
                post_limit=20
            )

        await message.answer(f"üëç –ì–æ—Ç–æ–≤–æ! –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ ¬´{channel_data['title']}¬ª –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à—É –ª–µ–Ω—Ç—É.")

    except ValueError as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É {channel_data['id']}: {e}")
        await message.answer(
            f"‚ùå **–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É ¬´{channel_data['title']}¬ª.**\n\n"
            f"–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —ç—Ç–æ —á–∞—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª. –ß—Ç–æ–±—ã —è –º–æ–≥ —á–∏—Ç–∞—Ç—å –∏–∑ –Ω–µ–≥–æ –ø–æ—Å—Ç—ã, "
            f"–º–æ–π —Ä–∞–±–æ—á–∏–π –∞–∫–∫–∞—É–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫.",
            parse_mode="Markdown"
        )
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ {channel_data['id']}: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")