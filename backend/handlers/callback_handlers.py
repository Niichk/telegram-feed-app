from aiogram import Router, F, types
from sqlalchemy.ext.asyncio import AsyncSession
from database.requests import delete_subscription # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è

router = Router()

# –≠—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ callback-–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "unsub:"
@router.callback_query(F.data.startswith("unsub:"))
async def process_unsubscription(callback: types.CallbackQuery, session: AsyncSession):
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ callback –ø—Ä–∏—à–µ–ª –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not callback.from_user:
        await callback.answer("–ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–∞–Ω–∞–ª–∞ –∏–∑ callback_data
    try:
        if not callback.data:
            raise ValueError("callback.data is None")
        channel_id = int(callback.data.split(":")[1])
    except (IndexError, ValueError, AttributeError):
        await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)
        return

    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î
    success = await delete_subscription(session, callback.from_user.id, channel_id)

    if success:
        # –ï—Å–ª–∏ —É–¥–∞—á–Ω–æ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∫–Ω–æ–ø–∫–∏
        if isinstance(callback.message, types.Message):
            await callback.message.edit_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å.")
        await callback.answer("–û—Ç–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!") # –í—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    else:
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∫–µ–º-—Ç–æ –µ—â–µ
        if isinstance(callback.message, types.Message):
            await callback.message.edit_text("ü§î –ü–æ—Ö–æ–∂–µ, –≤—ã —É–∂–µ –æ—Ç–ø–∏—Å–∞–Ω—ã.")
        await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)