import asyncio
import logging
import os
import sys
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher
# 1. –î–û–ë–ê–í–¨ –≠–¢–û–¢ –ò–ú–ü–û–†–¢
from aiogram.types import BotCommand

from database.engine import session_maker, create_db
from handlers import user_commands, forwarded_messages
from middlewares.db import DbSessionMiddleware 


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ ---
load_dotenv()
logging.basicConfig(level=logging.INFO)

API_TOKEN = os.getenv("API_TOKEN")


async def main():
    if not API_TOKEN:
        logging.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        sys.exit(1)

    bot = Bot(token=API_TOKEN)
    dp = Dispatcher()

    # 2. –î–û–ë–ê–í–¨ –≠–¢–û–¢ –ë–õ–û–ö –ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú –ë–û–¢–ê
    # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ ---
    main_menu_commands = [
        BotCommand(command="/start", description="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="/subscriptions", description="üìú –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏")
    ]
    await bot.set_my_commands(main_menu_commands)
    # ---------------------------

    dp.update.middleware(DbSessionMiddleware(session_pool=session_maker))
    dp.include_router(user_commands.router)
    dp.include_router(forwarded_messages.router)

    await create_db()
    
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")