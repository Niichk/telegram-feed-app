import asyncio
import logging
import os
import sys
from dotenv import load_dotenv
import json
import redis.asyncio as aioredis

from aiogram import Bot, Dispatcher
from aiogram.types import BotCommand

from database.engine import session_maker, create_db
from handlers import user_commands, forwarded_messages, callback_handlers, feedback_handler 
from middlewares.db import DbSessionMiddleware


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ ---
load_dotenv()
DB_URL_FOR_LOG = os.getenv("DATABASE_URL")

# --- –î–û–ë–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –∫–æ–¥–∞ –≤ –ª–æ–≥ ---
logging.basicConfig(level=logging.INFO)
logging.info("–ó–ê–ü–£–°–ö –ö–û–î–ê –í–ï–†–°–ò–ò 2.0 (–±–µ–∑ first_name/username)")
# ---------------------------------------------

logging.info(f"!!! BOT STARTING WITH DATABASE_URL: {DB_URL_FOR_LOG} !!!")


API_TOKEN = os.getenv("API_TOKEN")


async def listen_for_task_results(bot: Bot):
    """–°–ª—É—à–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö."""
    REDIS_URL = os.getenv("REDIS_URL")
    if not REDIS_URL:
        return
    
    redis_client = aioredis.from_url(REDIS_URL)
    pubsub = redis_client.pubsub()
    await pubsub.subscribe("task_completion_notifications")
    logging.info("–ë–æ—Ç –Ω–∞—á–∞–ª –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á.")

    while True:
        try:
            message = await pubsub.get_message(ignore_subscribe_messages=True)
            if message and message.get("type") == "message":
                task_result = json.loads(message["data"])
                chat_id = task_result.get("user_chat_id")
                channel_title = task_result.get("channel_title")
                
                if chat_id and channel_title:
                    from handlers.user_commands import get_main_keyboard # –õ–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
                    await bot.send_message(
                        chat_id=chat_id,
                        text=f"üëç –ì–æ—Ç–æ–≤–æ! –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ ¬´{channel_title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à—É –ª–µ–Ω—Ç—É.",
                        reply_markup=get_main_keyboard()
                    )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Redis: {e}")
            await asyncio.sleep(5)


async def main():
    if not API_TOKEN:
        logging.critical("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
        sys.exit(1)

    bot = Bot(token=API_TOKEN)
    dp = Dispatcher()

    main_menu_commands = [
        BotCommand(command="/start", description="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="/subscriptions", description="üìú –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"),
        BotCommand(command="/help", description="‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
        BotCommand(command="/feedback", description="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
    ]
    await bot.set_my_commands(main_menu_commands)

    await create_db()
    logging.info("Bot: New database tables created.")

    dp.update.middleware(DbSessionMiddleware(session_pool=session_maker))
    dp.include_router(user_commands.router)
    dp.include_router(forwarded_messages.router)
    dp.include_router(callback_handlers.router)
    dp.include_router(feedback_handler.router)

    await bot.delete_webhook(drop_pending_updates=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏ –±–æ—Ç–∞, –∏ —Å–ª—É—à–∞—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞
    await asyncio.gather(
        dp.start_polling(bot),
        listen_for_task_results(bot)
    )