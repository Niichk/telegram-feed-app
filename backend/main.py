import asyncio
import logging
import os
import sys
import json
import redis.asyncio as aioredis
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher
from aiogram.types import BotCommand

from database.engine import session_maker, create_db
from handlers import user_commands, forwarded_messages, callback_handlers, feedback_handler
from middlewares.db import DbSessionMiddleware

load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
REDIS_URL = os.getenv("REDIS_URL") or os.getenv("REDIS_PUBLIC_URL")
DATABASE_URL = os.getenv("DATABASE_URL")
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

async def listen_for_task_results(bot: Bot):
    """–°–ª—É—à–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –≤–æ—Ä–∫–µ—Ä–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö."""
    REDIS_URL = os.getenv("REDIS_URL") or os.getenv("REDIS_PUBLIC_URL")
    if not REDIS_URL:
        return

    redis_client = aioredis.from_url(REDIS_URL)
    pubsub = redis_client.pubsub()
    await pubsub.subscribe("task_completion_notifications")
    logging.info("–ë–æ—Ç —Å–ª—É—à–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á.")

    while True:
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º timeout –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è
            message = await pubsub.get_message(ignore_subscribe_messages=True, timeout=1.0)
            if message and message.get("type") == "message" and message["data"]:
                task_result = json.loads(message["data"])
                chat_id = task_result.get("user_chat_id")
                channel_title = task_result.get("channel_title")

                if chat_id and channel_title:
                    from handlers.user_commands import get_main_keyboard
                    await bot.send_message(
                        chat_id=int(chat_id),
                        text=f"üëç –ì–æ—Ç–æ–≤–æ! –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã –∏–∑ ¬´{channel_title}¬ª –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à—É –ª–µ–Ω—Ç—É.",
                        reply_markup=get_main_keyboard()
                    )
        except json.JSONDecodeError as e:
            logging.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ Redis-—Å–ª—É—à–∞—Ç–µ–ª–µ –±–æ—Ç–∞: {e}")
            await asyncio.sleep(1) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ

async def main():
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    logging.info(f"API_TOKEN: {'‚úÖ' if API_TOKEN else '‚ùå'}")
    logging.info(f"REDIS_URL: {'‚úÖ' if REDIS_URL else '‚ùå'}")
    logging.info(f"DATABASE_URL: {'‚úÖ' if DATABASE_URL else '‚ùå'}")
    
    if not API_TOKEN:
        logging.error("‚ùå API_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return
    
    if not REDIS_URL:
        logging.warning("‚ö†Ô∏è REDIS_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –≤–æ—Ä–∫–µ—Ä –Ω–µ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∑–∞–¥–∞—á–∏!")
    
    if not DATABASE_URL:
        logging.error("‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        return

    bot = Bot(token=API_TOKEN)
    dp = Dispatcher()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Redis –≤ handlers
    if REDIS_URL:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º REDIS_URL –≤ os.environ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∏–∑ handlers
        os.environ["REDIS_URL"] = REDIS_URL
        logging.info("‚úÖ REDIS_URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è handlers")

    commands = [
        BotCommand(command="/start", description="‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="/subscriptions", description="üìú –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏"),
        BotCommand(command="/help", description="‚ÑπÔ∏è –ü–æ–º–æ—â—å"),
        BotCommand(command="/feedback", description="‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤")
    ]
    await bot.set_my_commands(commands)

    await create_db()

    dp.update.middleware(DbSessionMiddleware(session_pool=session_maker))
    dp.include_router(user_commands.router)
    dp.include_router(forwarded_messages.router)
    dp.include_router(callback_handlers.router)
    dp.include_router(feedback_handler.router)

    await bot.delete_webhook(drop_pending_updates=True)

    await asyncio.gather(
        dp.start_polling(bot),
        listen_for_task_results(bot)
    )

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")